// automatically generated by the FlatBuffers compiler, do not modify


// @generated


extern crate flatbuffers;

#[allow(unused_imports, dead_code)]
pub mod flatstream {

  use core::mem;
  use core::cmp::Ordering;

  extern crate flatbuffers;
  use self::flatbuffers::{EndianScalar, Follow};
#[allow(unused_imports, dead_code)]
pub mod lobster {

  use core::mem;
  use core::cmp::Ordering;

  extern crate flatbuffers;
  use self::flatbuffers::{EndianScalar, Follow};

pub enum MessageEventOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct MessageEvent<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for MessageEvent<'a> {
  type Inner = MessageEvent<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> MessageEvent<'a> {
  pub const VT_TIMESTAMP: flatbuffers::VOffsetT = 4;
  pub const VT_EVENT_TYPE: flatbuffers::VOffsetT = 6;
  pub const VT_ORDER_ID: flatbuffers::VOffsetT = 8;
  pub const VT_SIZE: flatbuffers::VOffsetT = 10;
  pub const VT_PRICE: flatbuffers::VOffsetT = 12;
  pub const VT_DIRECTION: flatbuffers::VOffsetT = 14;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    MessageEvent { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args MessageEventArgs
  ) -> flatbuffers::WIPOffset<MessageEvent<'bldr>> {
    let mut builder = MessageEventBuilder::new(_fbb);
    builder.add_price(args.price);
    builder.add_order_id(args.order_id);
    builder.add_timestamp(args.timestamp);
    builder.add_size(args.size);
    builder.add_direction(args.direction);
    builder.add_event_type(args.event_type);
    builder.finish()
  }


  #[inline]
  pub fn timestamp(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(MessageEvent::VT_TIMESTAMP, Some(0.0)).unwrap()}
  }
  #[inline]
  pub fn event_type(&self) -> u8 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u8>(MessageEvent::VT_EVENT_TYPE, Some(0)).unwrap()}
  }
  #[inline]
  pub fn order_id(&self) -> u64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u64>(MessageEvent::VT_ORDER_ID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn size(&self) -> u32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u32>(MessageEvent::VT_SIZE, Some(0)).unwrap()}
  }
  #[inline]
  pub fn price(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(MessageEvent::VT_PRICE, Some(0)).unwrap()}
  }
  #[inline]
  pub fn direction(&self) -> i8 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i8>(MessageEvent::VT_DIRECTION, Some(0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for MessageEvent<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<f64>("timestamp", Self::VT_TIMESTAMP, false)?
     .visit_field::<u8>("event_type", Self::VT_EVENT_TYPE, false)?
     .visit_field::<u64>("order_id", Self::VT_ORDER_ID, false)?
     .visit_field::<u32>("size", Self::VT_SIZE, false)?
     .visit_field::<i64>("price", Self::VT_PRICE, false)?
     .visit_field::<i8>("direction", Self::VT_DIRECTION, false)?
     .finish();
    Ok(())
  }
}
pub struct MessageEventArgs {
    pub timestamp: f64,
    pub event_type: u8,
    pub order_id: u64,
    pub size: u32,
    pub price: i64,
    pub direction: i8,
}
impl<'a> Default for MessageEventArgs {
  #[inline]
  fn default() -> Self {
    MessageEventArgs {
      timestamp: 0.0,
      event_type: 0,
      order_id: 0,
      size: 0,
      price: 0,
      direction: 0,
    }
  }
}

pub struct MessageEventBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> MessageEventBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_timestamp(&mut self, timestamp: f64) {
    self.fbb_.push_slot::<f64>(MessageEvent::VT_TIMESTAMP, timestamp, 0.0);
  }
  #[inline]
  pub fn add_event_type(&mut self, event_type: u8) {
    self.fbb_.push_slot::<u8>(MessageEvent::VT_EVENT_TYPE, event_type, 0);
  }
  #[inline]
  pub fn add_order_id(&mut self, order_id: u64) {
    self.fbb_.push_slot::<u64>(MessageEvent::VT_ORDER_ID, order_id, 0);
  }
  #[inline]
  pub fn add_size(&mut self, size: u32) {
    self.fbb_.push_slot::<u32>(MessageEvent::VT_SIZE, size, 0);
  }
  #[inline]
  pub fn add_price(&mut self, price: i64) {
    self.fbb_.push_slot::<i64>(MessageEvent::VT_PRICE, price, 0);
  }
  #[inline]
  pub fn add_direction(&mut self, direction: i8) {
    self.fbb_.push_slot::<i8>(MessageEvent::VT_DIRECTION, direction, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> MessageEventBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    MessageEventBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<MessageEvent<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for MessageEvent<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("MessageEvent");
      ds.field("timestamp", &self.timestamp());
      ds.field("event_type", &self.event_type());
      ds.field("order_id", &self.order_id());
      ds.field("size", &self.size());
      ds.field("price", &self.price());
      ds.field("direction", &self.direction());
      ds.finish()
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `MessageEvent`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_message_event_unchecked`.
pub fn root_as_message_event(buf: &[u8]) -> Result<MessageEvent, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<MessageEvent>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `MessageEvent` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_message_event_unchecked`.
pub fn size_prefixed_root_as_message_event(buf: &[u8]) -> Result<MessageEvent, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<MessageEvent>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `MessageEvent` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_message_event_unchecked`.
pub fn root_as_message_event_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<MessageEvent<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<MessageEvent<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `MessageEvent` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_message_event_unchecked`.
pub fn size_prefixed_root_as_message_event_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<MessageEvent<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<MessageEvent<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a MessageEvent and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `MessageEvent`.
pub unsafe fn root_as_message_event_unchecked(buf: &[u8]) -> MessageEvent {
  flatbuffers::root_unchecked::<MessageEvent>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed MessageEvent and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `MessageEvent`.
pub unsafe fn size_prefixed_root_as_message_event_unchecked(buf: &[u8]) -> MessageEvent {
  flatbuffers::size_prefixed_root_unchecked::<MessageEvent>(buf)
}
#[inline]
pub fn finish_message_event_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    root: flatbuffers::WIPOffset<MessageEvent<'a>>) {
  fbb.finish(root, None);
}

#[inline]
pub fn finish_size_prefixed_message_event_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>, root: flatbuffers::WIPOffset<MessageEvent<'a>>) {
  fbb.finish_size_prefixed(root, None);
}
}  // pub mod lobster
}  // pub mod flatstream

