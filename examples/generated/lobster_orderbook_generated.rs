// automatically generated by the FlatBuffers compiler, do not modify


// @generated


extern crate flatbuffers;

#[allow(unused_imports, dead_code)]
pub mod flatstream {

  use core::mem;
  use core::cmp::Ordering;

  extern crate flatbuffers;
  use self::flatbuffers::{EndianScalar, Follow};
#[allow(unused_imports, dead_code)]
pub mod lobster {

  use core::mem;
  use core::cmp::Ordering;

  extern crate flatbuffers;
  use self::flatbuffers::{EndianScalar, Follow};

// struct Level, aligned to 8
#[repr(transparent)]
#[derive(Clone, Copy, PartialEq)]
pub struct Level(pub [u8; 16]);
impl Default for Level { 
  fn default() -> Self { 
    Self([0; 16])
  }
}
impl core::fmt::Debug for Level {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    f.debug_struct("Level")
      .field("price", &self.price())
      .field("size", &self.size())
      .finish()
  }
}

impl flatbuffers::SimpleToVerifyInSlice for Level {}
impl<'a> flatbuffers::Follow<'a> for Level {
  type Inner = &'a Level;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    <&'a Level>::follow(buf, loc)
  }
}
impl<'a> flatbuffers::Follow<'a> for &'a Level {
  type Inner = &'a Level;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    flatbuffers::follow_cast_ref::<Level>(buf, loc)
  }
}
impl<'b> flatbuffers::Push for Level {
    type Output = Level;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        let src = ::core::slice::from_raw_parts(self as *const Level as *const u8, <Self as flatbuffers::Push>::size());
        dst.copy_from_slice(src);
    }
    #[inline]
    fn alignment() -> flatbuffers::PushAlignment {
        flatbuffers::PushAlignment::new(8)
    }
}

impl<'a> flatbuffers::Verifiable for Level {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.in_buffer::<Self>(pos)
  }
}

impl<'a> Level {
  #[allow(clippy::too_many_arguments)]
  pub fn new(
    price: i64,
    size: u64,
  ) -> Self {
    let mut s = Self([0; 16]);
    s.set_price(price);
    s.set_size(size);
    s
  }

  pub fn price(&self) -> i64 {
    let mut mem = core::mem::MaybeUninit::<<i64 as EndianScalar>::Scalar>::uninit();
    // Safety:
    // Created from a valid Table for this object
    // Which contains a valid value in this slot
    EndianScalar::from_little_endian(unsafe {
      core::ptr::copy_nonoverlapping(
        self.0[0..].as_ptr(),
        mem.as_mut_ptr() as *mut u8,
        core::mem::size_of::<<i64 as EndianScalar>::Scalar>(),
      );
      mem.assume_init()
    })
  }

  pub fn set_price(&mut self, x: i64) {
    let x_le = x.to_little_endian();
    // Safety:
    // Created from a valid Table for this object
    // Which contains a valid value in this slot
    unsafe {
      core::ptr::copy_nonoverlapping(
        &x_le as *const _ as *const u8,
        self.0[0..].as_mut_ptr(),
        core::mem::size_of::<<i64 as EndianScalar>::Scalar>(),
      );
    }
  }

  pub fn size(&self) -> u64 {
    let mut mem = core::mem::MaybeUninit::<<u64 as EndianScalar>::Scalar>::uninit();
    // Safety:
    // Created from a valid Table for this object
    // Which contains a valid value in this slot
    EndianScalar::from_little_endian(unsafe {
      core::ptr::copy_nonoverlapping(
        self.0[8..].as_ptr(),
        mem.as_mut_ptr() as *mut u8,
        core::mem::size_of::<<u64 as EndianScalar>::Scalar>(),
      );
      mem.assume_init()
    })
  }

  pub fn set_size(&mut self, x: u64) {
    let x_le = x.to_little_endian();
    // Safety:
    // Created from a valid Table for this object
    // Which contains a valid value in this slot
    unsafe {
      core::ptr::copy_nonoverlapping(
        &x_le as *const _ as *const u8,
        self.0[8..].as_mut_ptr(),
        core::mem::size_of::<<u64 as EndianScalar>::Scalar>(),
      );
    }
  }

}

pub enum OrderBookSnapshotOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct OrderBookSnapshot<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for OrderBookSnapshot<'a> {
  type Inner = OrderBookSnapshot<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> OrderBookSnapshot<'a> {
  pub const VT_TIMESTAMP: flatbuffers::VOffsetT = 4;
  pub const VT_ASKS: flatbuffers::VOffsetT = 6;
  pub const VT_BIDS: flatbuffers::VOffsetT = 8;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    OrderBookSnapshot { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args OrderBookSnapshotArgs<'args>
  ) -> flatbuffers::WIPOffset<OrderBookSnapshot<'bldr>> {
    let mut builder = OrderBookSnapshotBuilder::new(_fbb);
    builder.add_timestamp(args.timestamp);
    if let Some(x) = args.bids { builder.add_bids(x); }
    if let Some(x) = args.asks { builder.add_asks(x); }
    builder.finish()
  }


  #[inline]
  pub fn timestamp(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(OrderBookSnapshot::VT_TIMESTAMP, Some(0.0)).unwrap()}
  }
  #[inline]
  pub fn asks(&self) -> Option<flatbuffers::Vector<'a, Level>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, Level>>>(OrderBookSnapshot::VT_ASKS, None)}
  }
  #[inline]
  pub fn bids(&self) -> Option<flatbuffers::Vector<'a, Level>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, Level>>>(OrderBookSnapshot::VT_BIDS, None)}
  }
}

impl flatbuffers::Verifiable for OrderBookSnapshot<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<f64>("timestamp", Self::VT_TIMESTAMP, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, Level>>>("asks", Self::VT_ASKS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, Level>>>("bids", Self::VT_BIDS, false)?
     .finish();
    Ok(())
  }
}
pub struct OrderBookSnapshotArgs<'a> {
    pub timestamp: f64,
    pub asks: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, Level>>>,
    pub bids: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, Level>>>,
}
impl<'a> Default for OrderBookSnapshotArgs<'a> {
  #[inline]
  fn default() -> Self {
    OrderBookSnapshotArgs {
      timestamp: 0.0,
      asks: None,
      bids: None,
    }
  }
}

pub struct OrderBookSnapshotBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> OrderBookSnapshotBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_timestamp(&mut self, timestamp: f64) {
    self.fbb_.push_slot::<f64>(OrderBookSnapshot::VT_TIMESTAMP, timestamp, 0.0);
  }
  #[inline]
  pub fn add_asks(&mut self, asks: flatbuffers::WIPOffset<flatbuffers::Vector<'b , Level>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(OrderBookSnapshot::VT_ASKS, asks);
  }
  #[inline]
  pub fn add_bids(&mut self, bids: flatbuffers::WIPOffset<flatbuffers::Vector<'b , Level>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(OrderBookSnapshot::VT_BIDS, bids);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> OrderBookSnapshotBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    OrderBookSnapshotBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<OrderBookSnapshot<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for OrderBookSnapshot<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("OrderBookSnapshot");
      ds.field("timestamp", &self.timestamp());
      ds.field("asks", &self.asks());
      ds.field("bids", &self.bids());
      ds.finish()
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `OrderBookSnapshot`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_order_book_snapshot_unchecked`.
pub fn root_as_order_book_snapshot(buf: &[u8]) -> Result<OrderBookSnapshot, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<OrderBookSnapshot>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `OrderBookSnapshot` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_order_book_snapshot_unchecked`.
pub fn size_prefixed_root_as_order_book_snapshot(buf: &[u8]) -> Result<OrderBookSnapshot, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<OrderBookSnapshot>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `OrderBookSnapshot` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_order_book_snapshot_unchecked`.
pub fn root_as_order_book_snapshot_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<OrderBookSnapshot<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<OrderBookSnapshot<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `OrderBookSnapshot` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_order_book_snapshot_unchecked`.
pub fn size_prefixed_root_as_order_book_snapshot_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<OrderBookSnapshot<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<OrderBookSnapshot<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a OrderBookSnapshot and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `OrderBookSnapshot`.
pub unsafe fn root_as_order_book_snapshot_unchecked(buf: &[u8]) -> OrderBookSnapshot {
  flatbuffers::root_unchecked::<OrderBookSnapshot>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed OrderBookSnapshot and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `OrderBookSnapshot`.
pub unsafe fn size_prefixed_root_as_order_book_snapshot_unchecked(buf: &[u8]) -> OrderBookSnapshot {
  flatbuffers::size_prefixed_root_unchecked::<OrderBookSnapshot>(buf)
}
#[inline]
pub fn finish_order_book_snapshot_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    root: flatbuffers::WIPOffset<OrderBookSnapshot<'a>>) {
  fbb.finish(root, None);
}

#[inline]
pub fn finish_size_prefixed_order_book_snapshot_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>, root: flatbuffers::WIPOffset<OrderBookSnapshot<'a>>) {
  fbb.finish_size_prefixed(root, None);
}
}  // pub mod lobster
}  // pub mod flatstream

